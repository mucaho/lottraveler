/*globals define, _*/
/**
 * Generated by DecoratorGenerator
 * This decorator inherits from the ModelDecorator.DiagramDesignerWidget.
 * With no changes to the methods - it will functions just like the ModelDecorator.
 *
 * For more methods see the ModelDecorator.DiagramDesignerWidget.js in the webgme repository.
 */

define([
    'js/RegistryKeys',
    'js/Constants',
    'decorators/ModelDecorator/DiagramDesigner/ModelDecorator.DiagramDesignerWidget',
    'jquery',
    'underscore'
], function (
    REGISTRY_KEYS,
    CONSTANTS,
    ModelDecoratorDiagramDesignerWidget) {

    'use strict';

    var DECORATOR_ID = 'TaskDecorator';

    function TaskDecorator(options) {
        var opts = _.extend({}, options);

        ModelDecoratorDiagramDesignerWidget.apply(this, [opts]);

        this.logger.debug('TaskDecorator ctor');
    }

    TaskDecorator.prototype = Object.create(ModelDecoratorDiagramDesignerWidget.prototype);
    TaskDecorator.prototype.constructor = TaskDecorator;
    TaskDecorator.prototype.DECORATORID = DECORATOR_ID;

    TaskDecorator.prototype.on_addTo = function () {
        var client = this._control._client,
            nodeObj = client.getNode(this._metaInfo[CONSTANTS.GME_ID]);

        this.logger.debug('This node was added to the canvas', nodeObj);

        // Call the base-class method..
        ModelDecoratorDiagramDesignerWidget.prototype.on_addTo.apply(this, arguments);

        // add custom display behavior for tasks
        updateDisplayName(this, nodeObj);
    };

    TaskDecorator.prototype.destroy = function () {
        ModelDecoratorDiagramDesignerWidget.prototype.destroy.apply(this, arguments);
    };

    TaskDecorator.prototype.update = function () {
        var client = this._control._client,
            nodeObj = client.getNode(this._metaInfo[CONSTANTS.GME_ID]);

        this.logger.debug('This node is on the canvas and received an update event', nodeObj);

        // Call the base-class method..
        ModelDecoratorDiagramDesignerWidget.prototype.update.apply(this, arguments);

        // add custom display behavior for tasks
        updateDisplayName(this, nodeObj);
    };

    function updateDisplayName(self, nodeObj) {
        var repeatable = nodeObj.getAttribute('repeatable');
        var group = nodeObj.getAttribute('group');

        var extendedName = self.skinParts.$name.text() +
            (repeatable ? '*' : '') +
            (group === 'destructive' ? ' [D]' : '') +
            (group === 'non-destructive' ? ' [N]' : '');
        self.skinParts.$name.text(extendedName);
        self.skinParts.$name.attr('title', extendedName);
    }

    return TaskDecorator;
});
