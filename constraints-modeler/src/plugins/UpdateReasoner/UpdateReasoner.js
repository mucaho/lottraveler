/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Mar 08 2020 19:12:29 GMT+0100 (GMT+01:00).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of UpdateReasoner.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin UpdateReasoner.
     * @constructor
     */
    function UpdateReasoner() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    UpdateReasoner.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    UpdateReasoner.prototype = Object.create(PluginBase.prototype);
    UpdateReasoner.prototype.constructor = UpdateReasoner;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    UpdateReasoner.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;

        // prevent running this plugin without setting proper namespace
        let namespace = '';
        const libraryNames = this.core.getLibraryNames(this.rootNode);
        if (libraryNames && libraryNames.indexOf('meta') >= 0) {
            namespace = 'meta';
        }
        if (this.namespace !== namespace) {
            callback('Can not run without meta namespace!', self.result);
        }

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        Promise.resolve()
            .then(() => {
                // extract the model
                var modelP = require('constraints-modeler/ExportFromModel')(self)
                .then((model) => {
                    // strip un-needed importedName properties from tasks
                    var tasks = model.tasks;
                    for (var task, i = 0, l = tasks.length; i < l; ++i) {
                        task = tasks[i];
                        delete task['importedName'];
                    }

                    return model;
                });

                return modelP;
            })
            .then(model => {
                var reasonerUrl = process.env.npm_package_config_REASONER_URI;
                var axios = require('axios').create({
                    baseURL: reasonerUrl
                });

                // update kb rules at reasoner via web service call
                axios.interceptors.request.use(function(req) {
                    self.logger.debug('Initiating update of KB to reasoner service...');
                    return req;
                });
                axios.interceptors.response.use(function(resp) {
                    var errors = 'errors' in resp.data ? resp.data.errors : [];
                    if (errors.length === 0) {
                        self.logger.debug('Update of KB to reasoner service succeeded!');
                        return Promise.resolve(resp);
                    } else {
                        self.logger.error('Update of KB to reasoner service failed, due to:', errors);
                        return Promise.reject(JSON.stringify(errors, null, 2));
                    }
                });
                return Promise.all([Promise.resolve(model), axios.post('/updateKnowledgeBase', model)]);
            })
            .then(([model]) => {
                var out;

                try {
                    // upload the rulesJson as a blob to WebGME interface
                    var rulesJson = JSON.stringify(model, null, 2);
                    out = self.blobClient.putFile('kb-facts.json', rulesJson);
                } catch (ex) {
                    out = Promise.reject(ex);
                }

                return out;
            })
            .then(metadataHash => {
                // upload artifact
                self.result.addArtifact(metadataHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch((err) => {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });
    };

    return UpdateReasoner;
});
