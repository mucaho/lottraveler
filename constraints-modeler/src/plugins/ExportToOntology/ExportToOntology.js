/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Fri Feb 19 2021 11:25:40 GMT+0100 (GMT+01:00).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ExportToOntology.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ExportToOntology.
     * @constructor
     */
    function ExportToOntology() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ExportToOntology.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ExportToOntology.prototype = Object.create(PluginBase.prototype);
    ExportToOntology.prototype.constructor = ExportToOntology;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ExportToOntology.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;

        // prevent running this plugin without setting proper namespace
        let namespace = '';
        const libraryNames = this.core.getLibraryNames(this.rootNode);
        if (libraryNames && libraryNames.indexOf('meta') >= 0) {
            namespace = 'meta';
        }
        if (this.namespace !== namespace) {
            callback('Can not run without meta namespace!', self.result);
        }

        // This will save the changes. If you don't want to save;
        // exclude self.save and call callback directly from this scope.
        Promise.resolve()
            .then(() => {
                // extract the model
                var modelP = require('constraints-modeler/ExportFromModel')(self)
                return modelP;
            })
            .then((model) => {
                const queries = [];

                // generate queries for renaming tasks
                if (this.getCurrentConfig().renameTasks) {
                    const renamedTasks = model.tasks.filter(task => task.name !== task.importedName);
                    const updateSubjectTasksQuery = require('constraints-modeler/sparql/update_subject_tasks')(...renamedTasks);
                    const updateObjectTasksQuery = require('constraints-modeler/sparql/update_object_tasks')(...renamedTasks);
                    queries.push(updateSubjectTasksQuery);
                    queries.push(updateObjectTasksQuery);
                }

                // generate queries for deleting all connections that are managed by the modeler
                const connectionTypes = require('constraints-modeler/ConnectionTypes').all;
                const deleteConnectionsQuery = require('constraints-modeler/sparql/delete_connections')(...connectionTypes);
                queries.push(deleteConnectionsQuery);

                // generate queries for deleting all unknown tasks
                if (this.getCurrentConfig().deleteTasks) {
                    const deleteSubjectTasksQuery = require('constraints-modeler/sparql/delete_subject_tasks')(...model.tasks);
                    const deleteObjectTasksQuery = require('constraints-modeler/sparql/delete_object_tasks')(...model.tasks);
                    queries.push(deleteSubjectTasksQuery);
                    queries.push(deleteObjectTasksQuery);
                }

                // generate queries for inserting tasks
                const insertTasksQuery = require('constraints-modeler/sparql/insert_tasks')(...model.tasks);
                queries.push(insertTasksQuery);

                // generate queries for inserting connections
                const insertConnectionsQuery = require('constraints-modeler/sparql/insert_connections')(...model.connections);
                queries.push(insertConnectionsQuery);

                return Promise.all(queries);
            })
            .then(queries => {
                const queryEndpoint = require('constraints-modeler/sparql/update');

                return queryEndpoint(...queries);
            })
            .then(() => {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch((err) => {
                // Result success is false at invocation.
                self.logger.error(err.stack);
                callback(err, self.result);
            });
    };

    return ExportToOntology;
});
